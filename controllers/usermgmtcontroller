// require node modules
const bcrypt = require("bcryptjs")

// require app modules
const { executeQuery } = require("../functions/db")
const catchAsyncErrors = require("../functions/catchAsyncErrors")
const { Checkgroup } = require("../functions/checkGroup")

// URL get /usermgmt
exports.userMgmt = catchAsyncErrors(async (req, res, next) => {
  // check group to display page
  const userMgmtGroups = "admin"
  const userMgmt = await Checkgroup(req.user, userMgmtGroups)
  if (!userMgmt) {
    return res.json({
      success: false,
      error: "unauthorized",
    })
  }

  // get all user info
  var querystr = `SELECT * FROM users`
  var values = []

  const usersData = await executeQuery(querystr, values)
  // get all group info
  querystr = `SELECT * FROM grouplist`

  const groupsData = await executeQuery(querystr, values)
  // return result
  res.status(200).json({
    success: true,
    message: `admin works, ${usersData.length} user(s) found, ${groupsData.length} group(s) found`,
    usersData,
    groupsData,
    userMgmt,
  })
})

// URL post /usermgmt/edit
exports.userMgmtEditForm = catchAsyncErrors(async (req, res, next) => {
  // check group
  const userMgmtGroups = "admin"
  const userMgmt = await Checkgroup(req.user, userMgmtGroups)
  if (!userMgmt) {
    return res.json({
      success: false,
      error: "unauthorized",
    })
  }

  if (req.body.password) {
    // hash password
    const salt = await bcrypt.genSalt(10)
    req.body.password = await bcrypt.hash(req.body.password, salt)
    console.log("hashed password is: ", req.body.password)
  }

  var fields = Object.keys(req.body)
  var values = Object.values(req.body)

  // slice to exclude the field "currUsername"
  const setClause = fields
    .slice(0, -1)
    .map((field) => `\`${field}\` = ?`)
    .join(", ")

  // converts form body to db appropriate values
  values = values.slice(0, -1).map((value) => (value === "role" ? value.join(",") : value === "active" ? 1 : value === "disabled" ? 0 : value))

  var querystr = `UPDATE users SET ${setClause} WHERE username = ?`
  values.push(req.body.currUsername) // in case username is modified, currUsername will be used to locate the user
  console.log("values are: ", values)

  const result = await executeQuery(querystr, values) // replace all the ? with the form values
  // return result
  res.status(200).json({
    success: true,
    message: "user edited successfully",
  })
})

// URL post /usermgmt/create
exports.userMgmtCreateForm = catchAsyncErrors(async (req, res, next) => {
  // check group
  const userMgmtGroups = "admin"
  const userMgmt = await Checkgroup(req.user, userMgmtGroups)
  if (!userMgmt) {
    return res.json({
      success: false,
      error: "unauthorized",
    })
  }

  // Validate that required fields are present
  if (!req.body.password || !req.body.username) {
    return res.json({
      success: false,
      error: "required",
      message: "Please enter all required values",
    })
  }

  // hash password
  const salt = await bcrypt.genSalt(10)
  req.body.password = await bcrypt.hash(req.body.password, salt)
  console.log("hashed password is: ", req.body.password)

  // check if username is duplicate
  var querystr = `SELECT username FROM users WHERE username = '${req.body.username}'`

  const result = await executeQuery(querystr, values) // replace all the ? with the form values
  // return result
  if (result.length > 0)
    return res.json({
      success: false,
      error: "conflict",
      message: "This username already exists, please enter a different username",
    })

  // create new user
  const requiredFields = ["username", "password"]

  var fields = Object.keys(req.body)
  var values = Object.values(req.body)

  // converts form body to db appropriate values
  if (req.body.role) {
    req.body.role = req.body.role.join(",")
  }

  const placeholders = fields.map((field) => `\`${field}\` = ?`).join(", ")
  querystr = `INSERT INTO users SET ${placeholders}`

  result = await executeQuery(querystr, values) // replace all the ? with the form values
  // return result
  res.status(200).json({
    success: true,
    message: "user created successfully",
  })
})

// URL post /usermgmt/group
exports.userMgmtGroupForm = catchAsyncErrors(async (req, res, next) => {
  // check group
  const userMgmtGroups = "admin"
  const userMgmt = await Checkgroup(req.user, userMgmtGroups)
  if (!userMgmt) {
    return res.json({
      success: false,
      error: "unauthorized",
    })
  }

  // Validate that required fields are present
  if (!req.body.role) {
    return res.json({
      success: false,
      error: "required",
      message: "Group name is required",
    })
  }
  // check if group is duplicate
  var querystr = `SELECT * FROM grouplist WHERE groupname = '${req.body.role}'`

  const result = await executeQuery(querystr, values) // replace all the ? with the form values
  // return result
  if (result.length > 0)
    return res.json({
      success: false,
      error: "conflict",
      message: "This group already exists, please enter a different group name",
    })

  // create new group
  var values = [req.body.role]
  querystr = `INSERT INTO grouplist VALUES (?)`

  result = await executeQuery(querystr, values) // replace all the ? with the form values
  // return result
  res.status(200).json({
    success: true,
    message: "group created successfully",
  })
})
